setwd("D:/AP LARSON/DallasCommuting")
# census_api_key("2f424d72af52408f49ed24e0608d6f5c583af625", install = TRUE)
countyList <- c(113, 321, 251, 425, 367, 379, 467,
181, 139, 439, 257, 349, 497, 213,
217, 85, 147, 97, 121, 397)
popData <- get_acs(geography = "tract",
variables = "B01001_001E",
state = "TX",
county = countyList,
geometry = FALSE)
# Population density
tx <- readOGR(dsn = ".", layer = "tl_2015_48_tract")
txdf <- as.data.frame(tx)
txdf$ALAND <- as.numeric(as.character(txdf$ALAND))
txdf$landArea <- txdf$ALAND * 3.861022e-07 # Convert sq meters to sq miles
txdf <- txdf[c(4,13)]
popData <- merge(popData, txdf, by = "GEOID")
popData$popDens <- popData$estimate / popData$landArea
popData <- popData[c(1,4,6,7)]
popData[popData == 0] <- NA; popData <- na.omit(popData)
colnames(popData)[2] <- "pop"
popData$pop1000 <- popData$pop / 1000 # Population, thousands
popData$popDens1000 <- popData$popDens / 1000 # Population density, 1000s/sq mi
popData$logPopDens <- log(popData$popDens) # Log density, population / sq mi
# Log median income
incomeData <- get_acs(geography = "tract",
variables = "B06011_001E",
state = "TX",
county = countyList,
geometry = FALSE)
incomeData$loginc <- log(incomeData$estimate)
incomeData <- incomeData[c(1,6)]
# Percentage residents in different FPL categories
povUniverse <- get_acs(geography = "tract",
variables = "B08122_001E", # total obs
state = "TX",
county = countyList,
geometry = FALSE)
pov100 <- get_acs(geography = "tract",
variables = "B08122_002E", # obs below 100% FPL
state = "TX",
county = countyList,
geometry = FALSE)
pov149 <- get_acs(geography = "tract",
variables = "B08122_003E", # obs 100-149% FPL
state = "TX",
county = countyList,
geometry = FALSE)
pov150 <- get_acs(geography = "tract",
variables = "B08122_004E", # obs 150%+ FPL
state = "TX",
county = countyList,
geometry = FALSE)
colnames(povUniverse)[4] <- "universe" # there has to be a better way to merge across datasets...
colnames(pov100)[4] <- "p100"
colnames(pov149)[4] <- "p149"
colnames(pov150)[4] <- "p150"
povData <- merge(povUniverse, pov100, by = "GEOID")
povData <- povData[c(1,4,8)]
povData <- merge(povData, pov149, by = "GEOID")
povData <- povData[c(1:3,6)]
povData <- merge(povData, pov150, by = "GEOID")
povData <- povData[c(1:4,7)]
povData[povData == 0] <- NA; povData <- na.omit(povData)
# Percent in each bracket
povData$pct100 <- povData$p100 / povData$universe * 100
povData$pct149 <- povData$p149 / povData$universe * 100
povData$pct150 <- povData$p150 / povData$universe * 100
# Plurality?
# NOTE: Not informative
# povData$pPov <- NA
# povData$pPov <- ifelse(povData$pct100 > povData$pct149 &
#                          povData$pct100 > povData$pct150,
#                        "Below 100% FPL", povData$pPov)
# povData$pPov <- ifelse(povData$pct149 > povData$pct100 &
#                          povData$pct149 > povData$pct150,
#                        "100%-149% FPL", povData$pPov)
# povData$pPov <- ifelse(povData$pct150 > povData$pct100 &
#                          povData$pct150 > povData$pct149,
#                        "150%+ FPL", povData$pPov)
plot(density(povData$pct100)) # Positively skewed
# May have to think about this differently later, but I'll leave it as is for now
head(popd)
head(popData)
head(incomeData)
head(povData)
plot(density(povData$pct100)) # Positively skewed
# Should add race and ethnicity, plurality
# Consider white black Hispanic and Asian
racUniverse <- get_acs(geography = "tract",
variables = "B02001_001E", # total obs
state = "TX",
county = countyList,
geometry = FALSE)
racWhite <- get_acs(geography = "tract",
variables = "B02001_002E", # white obs
state = "TX",
county = countyList,
geometry = FALSE)
racBlack <- get_acs(geography = "tract",
variables = "B02001_003E", # Black obs
state = "TX",
county = countyList,
geometry = FALSE)
racAsian <- get_acs(geography = "tract",
variables = "B02001_005E", # Asian obs
state = "TX",
county = countyList,
geometry = FALSE)
hispUniverse <- get_acs(geography = "tract",
variables = "B03001_001E", # total obs
state = "TX",
county = countyList,
geometry = FALSE)
hisp <- get_acs(geography = "tract",
variables = "B03001_003E", # Hispanic/Latino obs
state = "TX",
county = countyList,
geometry = FALSE)
head(racUniverse)
colnames(racUniverse)[4] <- "universe"
colnames(racWhite)[4] <- "white"
colnames(racBlack)[4] <- "black"
colnames(racAsian)[4] <- "asian"
colnames(hispUniverse)[4] <- "universe"
colnames(hisp)[4] <- "hisp"
colnames(hispUniverse)[4] <- "hispuniverse"
View(hispUniverse)
raceData <- merge(racUniverse, racWhite, by = "GEOID")
raceData <- raceData[c(1,4,8)]
raceData <- merge(racUniverse, racBlack, by = "GEOID")
raceData <- raceData[c(1:3,6)]
raceData <- merge(raceData, racAsian, by = "GEOID")
raceData <- raceData[c(1:4,7)]
raceData <- merge(raceData, hispUniverse, by = "GEOID")
raceData <- raceData[c(1:5,8)]
raceData <- merge(raceData, hisp, by = "GEOID")
raceData <- raceData[c(1:6,9)]
head(raceData)
raceData <- NULL
raceData <- merge(racUniverse, racWhite, by = "GEOID")
raceData
head(raceData)
raceData <- raceData[c(1,4,8)]
raceData <- merge(racUniverse, racBlack, by = "GEOID")
head(raceData)
raceData <- NULL
raceData <- merge(racUniverse, racWhite, by = "GEOID")
View(raceData)
raceData <- raceData[c(1,4,8)]
raceData <- merge(racUniverse, racBlack, by = "GEOID")
raceData <-NULL
raceData <- merge(racUniverse, racWhite, by = "GEOID")
raceData <- raceData[c(1,4,8)]
raceData <- merge(raceData, racBlack, by = "GEOID")
raceData <- raceData[c(1:3,6)]
raceData <- merge(raceData, racAsian, by = "GEOID")
raceData <- raceData[c(1:4,7)]
raceData <- merge(raceData, hispUniverse, by = "GEOID")
raceData <- raceData[c(1:5,8)]
raceData <- merge(raceData, hisp, by = "GEOID")
raceData <- raceData[c(1:6,9)]
raceData$pctWht <- raceData$white / raceData$universe
raceData$pctBlk <- raceData$black / raceData$universe
raceData$pctAsn <- raceData$asian / raceData$universe
raceData$pctHisp <- raceData$hisp / raceData$hispuniverse
raceData$primaryRace <- NA
raceData <- merge(racUniverse, racWhite, by = "GEOID")
raceData <- raceData[c(1,4,8)]
raceData <- merge(raceData, racBlack, by = "GEOID")
raceData <- raceData[c(1:3,6)]
raceData <- merge(raceData, racAsian, by = "GEOID")
raceData <- raceData[c(1:4,7)]
raceData <- merge(raceData, hispUniverse, by = "GEOID")
raceData <- raceData[c(1:5,8)]
raceData <- merge(raceData, hisp, by = "GEOID")
raceData <- raceData[c(1:6,9)]
raceData$pctWht <- raceData$white / raceData$universe
raceData$pctBlk <- raceData$black / raceData$universe
raceData$pctAsn <- raceData$asian / raceData$universe
raceData$pctHisp <- raceData$hisp / raceData$hispuniverse
raceData$pluWht <- NA
raceData$pluWht <- ifelse(raceData$pctWht > raceData$pctBlk &
raceData$pctWht > raceData$pctAsn &
raceData$pctWht > raceData$pctHisp,
1, 0)
raceData$pluBlk <- ifelse(raceData$pctBlk > raceData$pctWht &
raceData$pctBlk > raceData$pctAsn &
raceData$pctBlk > raceData$pctHisp,
1, 0)
raceData$pluAsn <- ifelse(raceData$pctAsn > raceData$pctBlk &
raceData$pctAsn > raceData$pctWht &
raceData$pctAsn > raceData$pctHisp,
1, 0)
raceData$pluHisp <- ifelse(raceData$pctHisp > raceData$pctBlk &
raceData$pctHisp > raceData$pctAsn &
raceData$pctHisp > raceData$pctWht,
1, 0)
raceData <- raceData[complete.cases(raceData),]
# Median Rent
medRent <- get_acs(geography = "tract",
variables = "B25064_001E",
state = "TX",
county = countyList,
geometry = FALSE)
head(medRent)
medRent <- medRent[c(1,4)]
medRent[medRent == 0] <- NA; medRent <- na.omit(medRent)
View(medRent)
# Housing values
medValue <- get_acs(geography = "tract",
variables = "B25077_001E",
state = "TX",
county = countyList,
geometry = FALSE)
head(medValue)
medValue <- medValue[c(1,4)]
medValue[medValue == 0] <- NA; medValue <- na.omit(medValue)
summary(medValue)
summary(medValue$estimate)
medValue$logHousVal <- log(medValue$estimate)
summary(medValue$logHousVal)
medValue$thouHousVal <- medValue/1000
medValue$thouHousVal <- medValue$estimate/1000
summary(medValue$thouHousVal)
medValue <- medValue[c(1,3,4)]
colnames(medValue)
summary(medRent$estimate)
colnames(medRent)[2] <- "medianRent"
medRent$logMedianRent <- log(medRent$medianRent)
tenureUniverse <- get_acs(geography = "tract",
variables = "B25003_001E",
state = "TX",
county = countyList,
geometry = FALSE)
tenureOwn <- get_acs(geography = "tract",
variables = "B25003_002E",
state = "TX",
county = countyList,
geometry = FALSE)
colnames(tenureUniverse)[4] <- "universe"
colnames(tenureOwn)[4] <- "own"
tenureData <- merge(tenureUniverse, tenureOwn, by = "GEOID")
tenureData <- tenureData[c(1,4,8)]
tenureData$pctOwn <- tenureData$own / tenureData$universe * 100
tenureData$pctRent <- 100 - tenureData$pctOwn
View(tenureData)
tenureData <- tenureData[complete.cases(tenureData),]
# Housing/unit age has to be a control variable
medianHousAge <- get_acs(geography = "tract",
variables = "B25035_001E",
state = "TX",
county = countyList,
geometry = FALSE)
head(medianHousAge)
medianHousAge <- medianHousAge[c(1,4)]
# Housing/unit age has to be a control variable
medianHousAge <- get_acs(geography = "tract",
variables = "B25035_001E",
state = "TX",
county = countyList,
geometry = FALSE)
medianHousAge$housAge <- 2018 - medianHousAge$estimate
medianHousAge <- medianHousAge[c(1,6)]
head(medianHousAge)
medianHousAge <- medianHousAge[complete.cases(medianHousAge),]
# Household size has to be a control variable
# Not easily available through ACS API so I'm downloading
housSize <- read.csv("ACS_16_5YR_S1101_with_ann.csv")
head(housSize)
housSize <- housSize[c(2,4)]
colnames(housSize) <- c("GEOID", "medHHsz")
colnames(housSize) <- c("GEOID", "meanHHsz")
head(housSize)
housSize <- housSize[complete.cases(housSize),]
housSize <- subset(housSize, GEOID %in% popData$GEOID)
View(housSize)
head(incomeData)
head(median_hilow())
head(medianHousAge)
head(medRent)
head(medValue)
head(popData)
head(povData)
head(raceData)
head(tenureData)
tenureData <- tenureData[c(1,4,5)]
colnames(raceData)
raceData <- raceData[c(1,12:15)]
colnames(raceData)
povData <- povData[1,6:8]
# KEEP
# popData, povData, raceData, incomeData, tenureData, housSize, medianHousAge, medValue, medRent
fullDemographic <- merge(popData, povData, by = "GEOID", all = TRUE)
head(popData)
head(povData)
colnames(povUniverse)[4] <- "universe" # there has to be a better way to merge across datasets...
colnames(pov100)[4] <- "p100"
colnames(pov149)[4] <- "p149"
colnames(pov150)[4] <- "p150"
povData <- merge(povUniverse, pov100, by = "GEOID")
povData <- povData[c(1,4,8)]
povData <- merge(povData, pov149, by = "GEOID")
povData <- povData[c(1:3,6)]
povData <- merge(povData, pov150, by = "GEOID")
povData <- povData[c(1:4,7)]
povData[povData == 0] <- NA; povData <- na.omit(povData)
# Percent in each bracket
povData$pct100 <- povData$p100 / povData$universe * 100
povData$pct149 <- povData$p149 / povData$universe * 100
povData$pct150 <- povData$p150 / povData$universe * 100
# Plurality?
# NOTE: Not informative
# povData$pPov <- NA
# povData$pPov <- ifelse(povData$pct100 > povData$pct149 &
#                          povData$pct100 > povData$pct150,
#                        "Below 100% FPL", povData$pPov)
# povData$pPov <- ifelse(povData$pct149 > povData$pct100 &
#                          povData$pct149 > povData$pct150,
#                        "100%-149% FPL", povData$pPov)
# povData$pPov <- ifelse(povData$pct150 > povData$pct100 &
#                          povData$pct150 > povData$pct149,
#                        "150%+ FPL", povData$pPov)
plot(density(povData$pct100)) # Positively skewed
povData <- povData[1,6,7,8]
colnames(povUniverse)[4] <- "universe" # there has to be a better way to merge across datasets...
colnames(pov100)[4] <- "p100"
colnames(pov149)[4] <- "p149"
colnames(pov150)[4] <- "p150"
povData <- merge(povUniverse, pov100, by = "GEOID")
povData <- povData[c(1,4,8)]
povData <- merge(povData, pov149, by = "GEOID")
povData <- povData[c(1:3,6)]
povData <- merge(povData, pov150, by = "GEOID")
povData <- povData[c(1:4,7)]
povData[povData == 0] <- NA; povData <- na.omit(povData)
# Percent in each bracket
povData$pct100 <- povData$p100 / povData$universe * 100
povData$pct149 <- povData$p149 / povData$universe * 100
povData$pct150 <- povData$p150 / povData$universe * 100
# Plurality?
# NOTE: Not informative
# povData$pPov <- NA
# povData$pPov <- ifelse(povData$pct100 > povData$pct149 &
#                          povData$pct100 > povData$pct150,
#                        "Below 100% FPL", povData$pPov)
# povData$pPov <- ifelse(povData$pct149 > povData$pct100 &
#                          povData$pct149 > povData$pct150,
#                        "100%-149% FPL", povData$pPov)
# povData$pPov <- ifelse(povData$pct150 > povData$pct100 &
#                          povData$pct150 > povData$pct149,
#                        "150%+ FPL", povData$pPov)
plot(density(povData$pct100)) # Positively skewed
povData <- povData[c(1,6:8)]
# KEEP
# popData, povData, raceData, incomeData, tenureData, housSize, medianHousAge, medValue, medRent
fullDemographic <- merge(popData, povData, by = "GEOID", all = TRUE)
head(fullDemographic)
fullDemographic <- merge(fullDemographic, raceData, by = "GEOID", all = TRUE)
fullDemographic <- merge(fullDemographic, incomeData, by = "GEOID", all = TRUE)
fullDemographic <- merge(fullDemographic, tenureData, by = "GEOID", all = TRUE)
fullDemographic <- merge(fullDemographic, housSize, by = "GEOID", all = TRUE)
fullDemographic <- merge(fullDemographic, medianHousAge, by = "GEOID", all = TRUE)
fullDemographic <- merge(fullDemographic, medValue, by = "GEOID", all = TRUE)
fullDemographic <- merge(fullDemographic, medRent, by = "GEOID", all = TRUE)
# REMOVE THE REST
rm(list=setdiff(ls(), "fullDemographic"))
write.csv(fullDemographic, file = "fullDemographic.csv", row.names = FALSE)