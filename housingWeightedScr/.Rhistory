if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
cats <- c("Socks","Coco")
rm(list=ls())
install.packages("gdata")
library(gdata)
hpi2016 <- read.csv("https://raw.githubusercontent.com/kho777/data-visualization/master/data/hpi2016dataonly.csv")
library(ggplot2)
theme_set(theme_minimal())
plot1 <- ggplot(hpi2016, aes(Region, Happy.Planet.Index))
plot1 + geom_boxplot(varwidth = TRUE, fill = "plum") +
labs(title = "BOXPLOT!",
subtitle = "Happy Planet Index by Region, 2016",
caption = "Source: HPI",
x = "HPI",
y = "Region")
plot1 + geom_boxplot(varwidth = TRUE, fill = "cornflowerblue") +
labs(title = "BOXPLOT!",
subtitle = "Happy Planet Index by Region, 2016",
caption = "Source: HPI",
x = "HPI",
y = "Region")
head(hpi2016)
hpi <- hpi2016$Happy.Planet.Index
pop <- hpi2016$Population
summary(hpi)
fivenum(hpi)
?gsub
install.packages("gapminder")
library(gapminder)
summary(gapminder)
str(gapminder)
gm=gapminder
head(gm)
summary(gm)
table(gm$country)
# Plot one variable
hist(gm$lifeExp)
# Plot two variables with logged version of x
plot(lifeExp ~ gdpPercap, gm, subset = year == 2007, log = "x", pch=16)
# Plot two variables with selected country
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "p")
# Try different plot types
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "l")
# Different symbols
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "b", pch=18)
# More layered plots using ggplot2, with regression line
install.packages("ggplot2")
library(ggplot2)
p <- ggplot(data = gm)
p + geom_point(size=2)
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
# Alternative
# p <- ggplot(data=gm, aes(x=gdpPercap, y=lifeExp, color=continent))
p + geom_point()
# Add some color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp, color=continent))
p + geom_point()
# Add a regression line, dropped the color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="lm")
# Add a  line, dropped the color grouping, try other method
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="loess")
# Add a regression line with logged x, dropped the color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="lm") +
scale_x_log10()
# More layered plots with ggplot2, line with other methods (Generalized Additive Model)
if (require("ggplot2")) {
p <- ggplot(data = gm)
}
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="gam") +
scale_x_log10()
# Why it is not purple?
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp,
color = "purple"))
p + geom_point() +
geom_smooth(method = "loess") +
scale_x_log10()
#  How about now?
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(color = "purple") +
geom_smooth(method = "loess") + scale_x_log10()
p <- ggplot(data = gm)
p + geom_point(size=2)
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point()
# Add some color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp, color=continent))
p + geom_point()
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "lme4")
pack(packages)
filenames <- list.files(path="E:/2018Spring/DataRegression",
pattern=".*csv")
filelist <- lapply(filenames, read.csv)
# Names for data frames
names(filelist) <- c("All",
"Pittsburgh",
"Baltimore",
"San Antonio",
"Chicago",
"Dallas",
"Denver",
"District of Columbia",
"Atlanta",
"Houston",
"Minneapolis",
"Tampa",
"Seattle",
"Los Angeles",
"Phoenix",
"Charlotte",
"Miami",
"Portland",
"Orlando",
"Philadelphia",
"Sacramento",
"San Diego",
"San Francisco",
"St. Louis",
"Boston",
"Detroit")
# Invisible function keeps lapply from spitting out the data.frames to the console
invisible(lapply(names(filelist), function(x) assign(x,filelist[[x]],envir=.GlobalEnv)))
filenames <- list.files(path="E:/2018Spring/DataRegression",
pattern=".*csv")
filelist <- lapply(filenames, read.csv)
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("leaflet", "rgdal", "shiny", "Rcpp", "httpuv")
pack(packages)
runExample("01_hello")
runApp('E:/Project Ideas/dccommdist')
runApp('E:/Project Ideas/dccommdist')
# NEW
# Read in all shapefiles, collapse into a single data frame, OLS
rm(list=ls())
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "tidycensus", "tidyverse", "rgdal")
pack(packages)
setwd("D:/AP LARSON/DallasCommutingV2/tractShpsCensus")
myShps <- list.files(".", pattern="\\.shp$", full.names = TRUE)
# NEW
# Read in all shapefiles, collapse into a single data frame, OLS
rm(list=ls())
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "tidycensus", "tidyverse", "rgdal", "raster")
pack(packages)
setwd("D:/AP LARSON/DallasCommutingV2/tractShpsCensus")
myShps <- list.files(".", pattern="\\.shp$", full.names = TRUE)
readShps <- lapply(myShps, shapefile)
mhmm <- do.call(rbind.data.frame, readShps)
mhmm <- do.call(rbind.data.frame, readShps@data)
mytest <- data.frame()
mytest <- data.frame()
for (i in 1:length(readShps)){
dat <- readShps[i]@data
mytest <- rbind(mytest, dat)
}
head(readShps[1]@data)
head(readShps@data)
head(readShps@data[1])
readShps[[1]]
readShps[[1]]@data
mytest <- data.frame()
for (i in 1:length(readShps)){
dat <- readShps[[i]]@data
mytest <- rbind(mytest, dat)
}
?rbind
# NEW
# Read in all shapefiles, collapse into a single data frame, OLS
rm(list=ls())
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "tidycensus", "tidyverse", "rgdal", "raster")
pack(packages)
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
MSAshps <- as.data.frame(list.files(pattern = "\\.shp$")) # list all shapefiles
colnames(MSAshps) <- "id"; MSAshps$id <- as.character(MSAshps$id)
MSAshps <- MSAshps[grepl("res", MSAshps$id),] # keep only the MSA ones
# Got some to remove. yes it's ugly
drops <- c("res_BOS_MA1.shp", "res_BOS_MA2.shp", "res_CHA_NC1.shp",
"res_CHA_NC2.shp", "res_CIN_OH1.shp", "res_CIN_OH2.shp",
"res_CIN_OH3.shp", "res_KAN_MO1.shp", "res_KAN_MO2.shp",
"res_LOU_KY1.shp", "res_LOU_KY2.shp", "res_MIN_MN1.shp",
"res_MIN_MN2.shp", "res_NOR_VA1.shp", "res_NOR_VA2.shp",
"res_POR_OR1.shp", "res_POR_OR2.shp", "res_STL_MO1.shp",
"res_STL_MO2.shp")
MSAshps <- as.data.frame(MSAshps); colnames(MSAshps) <- "id"
MSAshps <- subset(MSAshps, !(id %in% drops))
# Must remove .shp extension from end
MSAshps <- sub("\\.shp$", "", MSAshps$id)
readShps <- lapply(MSAshps, shapefile)
mytest <- data.frame()
for (i in 1:length(readShps)){
dat <- readShps[[i]]@data
mytest <- rbind(mytest, dat)
}
mytest <- list()
mytest <- list()
for (i in 1:length(readShps)){
dat <- readShps[[i]]@data
mytest[i] <- dat
}
warnings()
View(dat)
View(mytest)
View(dat)
View(mytest)
mytest
mytest <- list()
for (i in 1:length(readShps)){
dat <- readShps[[i]]@data
mytest[[i]] <- dat
}
mhmm <- do.call(rbind, mytest)
View(mytest)
View(dat)
mytest <- list()
for (i in 1:length(readShps)){
dat <- as.data.frame(readShps[[i]]@data)
mytest[[i]] <- dat
}
View(dat)
datalist <- list()
datalist <- list()
for (i in 1:5) {
dat <- as.data.frame(readShps@data[[i]])
datalist[[i]] <- dat # add it to your list
}
for (i in 1:5) {
dat <- readShps[i]
datalist[[i]] <- dat # add it to your list
}
View(datalist)
for (i in 1:5) {
dat <- readShps[[i]]
datalist[[i]] <- dat # add it to your list
}
readShps[[2]]
readShps[[3]]@data
datalist <- list()
for (i in 1:5) {
dat <- readShps[[i]]@data
datalist[[i]] <- dat # add it to your list
}
datalist
View(datalist)
for (i in 1:length(readShps)) {
dat <- readShps[[i]]@data
datalist[[i]] <- dat # add it to your list
}
View(datalist)
lapply(datalist, function(x) { x["layer"] <- NULL; x })
datalist <- lapply(datalist, function(x) { x["layer"] <- NULL; x })
View(datalist)
datalist <- lapply(datalist, function(x) { x["path"] <- NULL; x })
allJobs <- do.call(rbind, datalist)
head(allJobs)
allJobs <- allJobs[c(1,8,10)]
head(allJobs)\
head(allJobs)
# Read in all Census datasets
setwd("D:/AP LARSON/DallasCommutingV2/censusData")
MSAcsvs <- list.files(pattern = "*.csv")
datalist <- lapply(MSAcsvs, read.csv)
View(datalist)
View(datalist)
allCensus <- do.call(rbind, datalist)
# Read in all HOLC data
setwd("D:/AP LARSON/DallasCommutingV2/housingWeightedScr")
MSAcsvs <- list.files(pattern = "*.csv")
datalist <- lapply(MSAcsvs, read.csv)
allHous <- do.call(rbind, datalist)
head(allHous)
head(allCensus)
head(allJobs)
fullMerge <- merge(allCensus, allJobs, by = "GEOID")
fullMerge <- merge(fullMerge, allHous, by = "GEOID")
housOnly <- fullMerge[!is.na(fullMerge$quantScore),]
View(housOnly)
testModel <- lm(thouHousVal ~ quantScore, data = housOnly)
summary(testModel)
testModel <- lm(pctOwn ~ quantScore, data = housOnly)
summary(testModel) # HOLY CRAP
housOnly$thouJobs <- housOnly$jobs / 1000
testModel <- lm(thouJobs ~ quantScore, data = housOnly)
summary(testModel)
testModel <- lm(com60 ~ quantScore, data = housOnly)
summary(testModel)
testModel <- lm(thouInc ~ quantScore, data = housOnly)
summary(testModel)
testModel <- lm(pct100 ~ quantScore, data = housOnly)
summary(testModel)
testModel <- lm(pctBlk ~ quantScore, data = housOnly)
summary(testModel)
testModel <- lm(pctWht ~ quantScore, data = housOnly)
summary(testModel)
testModel <- lm(pctHisp ~ quantScore, data = housOnly)
summary(testModel)
testModel <- lm(hunMedRent ~ quantScore, data = housOnly)
summary(testModel)
testModel <- lm(comBl10 ~ quantScore, data = housOnly)
summary(testModel)
