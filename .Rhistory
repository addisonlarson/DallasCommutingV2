if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
cats <- c("Socks","Coco")
rm(list=ls())
install.packages("gdata")
library(gdata)
hpi2016 <- read.csv("https://raw.githubusercontent.com/kho777/data-visualization/master/data/hpi2016dataonly.csv")
library(ggplot2)
theme_set(theme_minimal())
plot1 <- ggplot(hpi2016, aes(Region, Happy.Planet.Index))
plot1 + geom_boxplot(varwidth = TRUE, fill = "plum") +
labs(title = "BOXPLOT!",
subtitle = "Happy Planet Index by Region, 2016",
caption = "Source: HPI",
x = "HPI",
y = "Region")
plot1 + geom_boxplot(varwidth = TRUE, fill = "cornflowerblue") +
labs(title = "BOXPLOT!",
subtitle = "Happy Planet Index by Region, 2016",
caption = "Source: HPI",
x = "HPI",
y = "Region")
head(hpi2016)
hpi <- hpi2016$Happy.Planet.Index
pop <- hpi2016$Population
summary(hpi)
fivenum(hpi)
?gsub
install.packages("gapminder")
library(gapminder)
summary(gapminder)
str(gapminder)
gm=gapminder
head(gm)
summary(gm)
table(gm$country)
# Plot one variable
hist(gm$lifeExp)
# Plot two variables with logged version of x
plot(lifeExp ~ gdpPercap, gm, subset = year == 2007, log = "x", pch=16)
# Plot two variables with selected country
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "p")
# Try different plot types
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "l")
# Different symbols
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "b", pch=18)
# More layered plots using ggplot2, with regression line
install.packages("ggplot2")
library(ggplot2)
p <- ggplot(data = gm)
p + geom_point(size=2)
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
# Alternative
# p <- ggplot(data=gm, aes(x=gdpPercap, y=lifeExp, color=continent))
p + geom_point()
# Add some color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp, color=continent))
p + geom_point()
# Add a regression line, dropped the color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="lm")
# Add a  line, dropped the color grouping, try other method
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="loess")
# Add a regression line with logged x, dropped the color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="lm") +
scale_x_log10()
# More layered plots with ggplot2, line with other methods (Generalized Additive Model)
if (require("ggplot2")) {
p <- ggplot(data = gm)
}
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="gam") +
scale_x_log10()
# Why it is not purple?
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp,
color = "purple"))
p + geom_point() +
geom_smooth(method = "loess") +
scale_x_log10()
#  How about now?
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(color = "purple") +
geom_smooth(method = "loess") + scale_x_log10()
p <- ggplot(data = gm)
p + geom_point(size=2)
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point()
# Add some color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp, color=continent))
p + geom_point()
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "lme4")
pack(packages)
filenames <- list.files(path="E:/2018Spring/DataRegression",
pattern=".*csv")
filelist <- lapply(filenames, read.csv)
# Names for data frames
names(filelist) <- c("All",
"Pittsburgh",
"Baltimore",
"San Antonio",
"Chicago",
"Dallas",
"Denver",
"District of Columbia",
"Atlanta",
"Houston",
"Minneapolis",
"Tampa",
"Seattle",
"Los Angeles",
"Phoenix",
"Charlotte",
"Miami",
"Portland",
"Orlando",
"Philadelphia",
"Sacramento",
"San Diego",
"San Francisco",
"St. Louis",
"Boston",
"Detroit")
# Invisible function keeps lapply from spitting out the data.frames to the console
invisible(lapply(names(filelist), function(x) assign(x,filelist[[x]],envir=.GlobalEnv)))
filenames <- list.files(path="E:/2018Spring/DataRegression",
pattern=".*csv")
filelist <- lapply(filenames, read.csv)
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("leaflet", "rgdal", "shiny", "Rcpp", "httpuv")
pack(packages)
runExample("01_hello")
runApp('E:/Project Ideas/dccommdist')
runApp('E:/Project Ideas/dccommdist')
# Goal here: combine information on commuting distance, HOLC, and demographic info
rm(list=ls())
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "tidycensus", "tidyverse", "rgdal")
pack(packages)
setwd("D:/AP LARSON/DallasCommutingV2")
dem <- read.csv("fullDemographic.csv")
qualifiers <- read.csv("qualifyingTracts.csv")
holcIntersect <- readOGR(dsn = ".", layer = "HOLC_Dallas_overlay")
holcDf <- as.data.frame(holcIntersect)
length(unique(holcDf$GEOID)) # only 122 unique ids. Means that you need to collapse?
holcDf$quantScore <- NA
holcDf$quantScore <- ifelse(holcDf$holc_grade == "A", 4, holcDf$quantScore)
holcDf$quantScore <- ifelse(holcDf$holc_grade == "B", 3, holcDf$quantScore)
holcDf$quantScore <- ifelse(holcDf$holc_grade == "C", 2, holcDf$quantScore)
holcDf$quantScore <- ifelse(holcDf$holc_grade == "D", 1, holcDf$quantScore)
resGEOID <- aggregate(holcDf$quantScore, by = list(holcDf$GEOID), FUN = mean)
colnames(resGEOID) <- c("GEOID", "quantScore")
head(merge(holcDf, resGEOID, by = "GEOID"))
holcID <- merge(holcDf, resGEOID, by = "GEOID")
holcID <- holcID[!duplicated(holcID$GEOID), ]
s000 <- read.csv("S000dirdist.csv")
se01 <- read.csv("SE01dirdist.csv")
se03 <- read.csv("SE03dirdist.csv")
head(se03)
fullData <- merge(dem, holcID, by = "GEOID")
head(s000)
s000 <- read.csv("S000dirdist.csv"); s000 <- s000[c(1:3)]
se01 <- read.csv("SE01dirdist.csv"); se01 <- se01[c(1:3)]
se03 <- read.csv("SE03dirdist.csv"); se03 <- se03[c(1:3)]
fullData <- merge(fullData, s000, by.x = "GEOID", by.y = "idnum")
fullData <- merge(fullData, se01, by.x = "GEOID", by.y = "idnum")
fullData <- merge(fullData, se03, by.x = "GEOID", by.y = "idnum")
head(fullData)
s000 <- read.csv("S000dirdist.csv")
head(s000)
s000 <- read.csv("S000dirdist.csv"); s000 <- s000[c(1:3)]; colnames(s000)[2] <- "s000dist"
head(s000)
s000 <- read.csv("S000dirdist.csv"); s000 <- s000[c(1,3)]; colnames(s000)[2] <- "s000dist"
se01 <- read.csv("SE01dirdist.csv"); se01 <- se01[c(1,3)]; colnames(se01)[2] <- "se01dist"
se03 <- read.csv("SE03dirdist.csv"); se03 <- se03[c(1,3)]; colnames(se03)[2] <- "se03dist"
fullData <- merge(dem, holcID, by = "GEOID")
fullData <- merge(fullData, s000, by.x = "GEOID", by.y = "idnum")
fullData <- merge(fullData, se01, by.x = "GEOID", by.y = "idnum")
fullData <- merge(fullData, se03, by.x = "GEOID", by.y = "idnum")
head(fullData)
testModel <- lm(s000dist ~ logPopDens + pct100 + pluWht + pluBlk + pluAsn + pluHisp +
loginc + pctRent + meanHHsz + housAge + logHousVal + logMedianRent +
quantScore.y, data = fullData)
summary(testModel)
testmodel2 <- lm(s000dist ~ logPopDens + pct100 + pluWht + pluBlk + loginc +
pctRent + logHousVal + logMedianRent +
quantScore.y, data = fullData)
summary(testModel2)
testmodel2 <- lm(s000dist ~ logPopDens + pct100 + pluWht + pluBlk + loginc +
pctRent + logHousVal + logMedianRent +
quantScore.y, data = fullData)
summary(testModel2)
testmodel2 <- lm(s000dist ~ logPopDens + pct100 + pluWht + pluBlk + loginc +
pctRent + logHousVal + logMedianRent +
quantScore.y, data = fullData)
summary(testModel2)
testmodel2 <- lm(s000dist ~ logPopDens + pct100 + pluWht + pluBlk + loginc +
pctRent + logHousVal + logMedianRent + quantScore.y, data = fullData)
summary(testModel2)
testModel <- lm(s000dist ~ logPopDens + pct100 + pluWht + pluBlk + pluAsn + pluHisp +
loginc + pctRent + meanHHsz + housAge + logHousVal + logMedianRent +
quantScore.y, data = fullData)
summary(testModel)
testmodel2 <- lm(s000dist ~ logPopDens + pct100 + pluWht + pluBlk + loginc +
pctRent + logHousVal + logMedianRent + quantScore.y, data = fullData)
summary(testModel2)
testModel2 <- lm(s000dist ~ logPopDens + pct100 + pluWht + pluBlk + loginc +
pctRent + logHousVal + quantScore.y, data = fullData)
summary(testModel2)
fullData$logPctRent <- log(fullData$pctRent)
testModel3 <- lm(s000dist ~ logPopDens + pct100 + pluWht + pluBlk + loginc +
logPctRent + logHousVal + quantScore.y, data = fullData)
summary(testModel3)
plot(density(fullData$pct100))
moop <- fullData$pct100
na.omit(moop)
moop <- na.omit(moo[])
moop <- na.omit(moop)
plot(density(moop))
summary(testModel3)
