if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
cats <- c("Socks","Coco")
rm(list=ls())
install.packages("gdata")
library(gdata)
hpi2016 <- read.csv("https://raw.githubusercontent.com/kho777/data-visualization/master/data/hpi2016dataonly.csv")
library(ggplot2)
theme_set(theme_minimal())
plot1 <- ggplot(hpi2016, aes(Region, Happy.Planet.Index))
plot1 + geom_boxplot(varwidth = TRUE, fill = "plum") +
labs(title = "BOXPLOT!",
subtitle = "Happy Planet Index by Region, 2016",
caption = "Source: HPI",
x = "HPI",
y = "Region")
plot1 + geom_boxplot(varwidth = TRUE, fill = "cornflowerblue") +
labs(title = "BOXPLOT!",
subtitle = "Happy Planet Index by Region, 2016",
caption = "Source: HPI",
x = "HPI",
y = "Region")
head(hpi2016)
hpi <- hpi2016$Happy.Planet.Index
pop <- hpi2016$Population
summary(hpi)
fivenum(hpi)
?gsub
install.packages("gapminder")
library(gapminder)
summary(gapminder)
str(gapminder)
gm=gapminder
head(gm)
summary(gm)
table(gm$country)
# Plot one variable
hist(gm$lifeExp)
# Plot two variables with logged version of x
plot(lifeExp ~ gdpPercap, gm, subset = year == 2007, log = "x", pch=16)
# Plot two variables with selected country
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "p")
# Try different plot types
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "l")
# Different symbols
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "b", pch=18)
# More layered plots using ggplot2, with regression line
install.packages("ggplot2")
library(ggplot2)
p <- ggplot(data = gm)
p + geom_point(size=2)
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
# Alternative
# p <- ggplot(data=gm, aes(x=gdpPercap, y=lifeExp, color=continent))
p + geom_point()
# Add some color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp, color=continent))
p + geom_point()
# Add a regression line, dropped the color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="lm")
# Add a  line, dropped the color grouping, try other method
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="loess")
# Add a regression line with logged x, dropped the color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="lm") +
scale_x_log10()
# More layered plots with ggplot2, line with other methods (Generalized Additive Model)
if (require("ggplot2")) {
p <- ggplot(data = gm)
}
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="gam") +
scale_x_log10()
# Why it is not purple?
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp,
color = "purple"))
p + geom_point() +
geom_smooth(method = "loess") +
scale_x_log10()
#  How about now?
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(color = "purple") +
geom_smooth(method = "loess") + scale_x_log10()
p <- ggplot(data = gm)
p + geom_point(size=2)
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point()
# Add some color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp, color=continent))
p + geom_point()
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "lme4")
pack(packages)
filenames <- list.files(path="E:/2018Spring/DataRegression",
pattern=".*csv")
filelist <- lapply(filenames, read.csv)
# Names for data frames
names(filelist) <- c("All",
"Pittsburgh",
"Baltimore",
"San Antonio",
"Chicago",
"Dallas",
"Denver",
"District of Columbia",
"Atlanta",
"Houston",
"Minneapolis",
"Tampa",
"Seattle",
"Los Angeles",
"Phoenix",
"Charlotte",
"Miami",
"Portland",
"Orlando",
"Philadelphia",
"Sacramento",
"San Diego",
"San Francisco",
"St. Louis",
"Boston",
"Detroit")
# Invisible function keeps lapply from spitting out the data.frames to the console
invisible(lapply(names(filelist), function(x) assign(x,filelist[[x]],envir=.GlobalEnv)))
filenames <- list.files(path="E:/2018Spring/DataRegression",
pattern=".*csv")
filelist <- lapply(filenames, read.csv)
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("leaflet", "rgdal", "shiny", "Rcpp", "httpuv")
pack(packages)
runExample("01_hello")
runApp('E:/Project Ideas/dccommdist')
runApp('E:/Project Ideas/dccommdist')
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
MSAshps <- list.files(pattern = "\\.shp$")
MSAshps <- list.files(pattern = "^.*_.*.shp$")
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
rm(list=ls())
MSAshps <- list.files(pattern = "^.*_.*.shp$")
MSAshps <- list.files(pattern = "^.*_.*^.*.shp$")
MSAshps <- list.files(pattern = "^.*_.*^.*_.*.shp$")
MSAshpa <- list.files(pattern = "res.*^.*.png$")
MSAshpa <- list.files(pattern = "^.*res*.*.png$")
rm(list=ls())
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
MSAshps <- list.files(pattern = "\\.shp$")
MSAshps <- ("res" %in% MSAshps)
rm(list=ls())
# The goal here:
# Merge transit shps with Census data.
# Obtain population density using the ALAND field.
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
MSAshps <- list.files(pattern = "\\.shp$")
?subset
MSAshps <- subset(MSAshps, "res" %in% MSAshps)
?gsub
MSAshps <- list.files(pattern = "\\.shp$")
MSAshps <- grep("\\res_$", MSAshps)
MSAshps <- list.files(pattern = "\\.shp$")
MSAshps <- grep("\\res$", MSAshps)
MSAshps <- list.files(pattern = "\\.shp$")
MSAshps <- grep("\\res$", MSAshps, perl = TRUE)
MSAshps <- list.files(pattern = "\\.shp$")
grepl("\\res$", MSAshps, perl = TRUE)
MSAshps
grepl("\\r$", MSAshps, perl = TRUE)
grepl("\\r$", MSAshps)
MSAshps <- as.data.frame(list.files(pattern = "\\.shp$"))
grepl("\\r$", MSAshps$`list.files(pattern = "\\.shp$")`)
colnames(MSAshps) <- "id"
grepl("\\r$", MSAshps$id)
MSAshps[!grepl("res", MSAshps$id), ]
MSAshps[!grepl("r", MSAshps$id), ]
jk <- MSAshps[!grepl("r", MSAshps$id), ]
jk <- MSAshps[grepl("r", MSAshps$id), ]
View(MSAshps)
str(MSAshps)
colnames(MSAshps) <- "id"; MSAshps$id <- as.character(MSAshps$id)
jk <- MSAshps[grepl("r", MSAshps$id), ]
jk <- MSAshps[!grepl("r", MSAshps$id), ]
str(MSAshps)
MSAshps[!grepl("r", MSAshps$id),]
MSAshps[!grepl("res", MSAshps$id),]
MSAshps[grepl("res", MSAshps$id),]
MSAshps <- MSAshps[grepl("res", MSAshps$id),]
MSAshps <- MSAshps[!grepl("1", MSAshps$id),]
MSAshps <- as.data.frame(MSAshps); colnames(MSAshps) <- "id"
MSAshps <- MSAshps[!grepl("1", MSAshps$id),]
rm(list=ls())
# The goal here:
# Merge transit shps with Census data.
# Obtain population density using the ALAND field.
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
MSAshps <- as.data.frame(list.files(pattern = "\\.shp$")) # list all shapefiles
colnames(MSAshps) <- "id"; MSAshps$id <- as.character(MSAshps$id)
MSAshps <- MSAshps[grepl("res", MSAshps$id),] # keep only the MSA ones
MSAshps <- as.data.frame(MSAshps); colnames(MSAshps) <- "id"
rm(list=ls())
# The goal here:
# Merge transit shps with Census data.
# Obtain population density using the ALAND field.
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
MSAshps <- as.data.frame(list.files(pattern = "\\.shp$")) # list all shapefiles
colnames(MSAshps) <- "id"; MSAshps$id <- as.character(MSAshps$id)
MSAshps <- MSAshps[grepl("res", MSAshps$id),] # keep only the MSA ones
MSAshps
# Got some to remove: the ones with the numbers
drops <- names(MSAshps) %in% c("res_BOS_MA1.shp",
"res_BOS_MA2.shp",
"res_CHA_NC1.shp",
"res_CHA_NC2.shp",
"res_CIN_OH1.shp",
"res_CIN_OH2.shp",
"res_CIN_OH3.shp",
"res_KAN_MO1.shp",
"res_KAN_MO2.shp",
"res_LOU_KY1.shp",
"res_LOU_KY2.shp",
"res_MIN_MN1.shp",
"res_MIN_MN2.shp",
"res_NOR_VA1.shp",
"res_NOR_VA2.shp",
"res_POR_OR1.shp",
"res_POR_OR2.shp",
"res_STL_MO1.shp",
"res_STL_MO2.shp")
MSAshps <- MSAshps[!drops]
rm(list=ls())
# The goal here:
# Merge transit shps with Census data.
# Obtain population density using the ALAND field.
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
MSAshps <- as.data.frame(list.files(pattern = "\\.shp$")) # list all shapefiles
colnames(MSAshps) <- "id"; MSAshps$id <- as.character(MSAshps$id)
MSAshps <- MSAshps[grepl("res", MSAshps$id),] # keep only the MSA ones
# Got some to remove: the ones with the numbers
drops <- names(MSAshps) %in% c("res_BOS_MA1.shp",
"res_BOS_MA2.shp",
"res_CHA_NC1.shp",
"res_CHA_NC2.shp",
"res_CIN_OH1.shp",
"res_CIN_OH2.shp",
"res_CIN_OH3.shp",
"res_KAN_MO1.shp",
"res_KAN_MO2.shp",
"res_LOU_KY1.shp",
"res_LOU_KY2.shp",
"res_MIN_MN1.shp",
"res_MIN_MN2.shp",
"res_NOR_VA1.shp",
"res_NOR_VA2.shp",
"res_POR_OR1.shp",
"res_POR_OR2.shp",
"res_STL_MO1.shp",
"res_STL_MO2.shp")
# Got some to remove: the ones with the numbers
drops <- names(MSAshps) %in% c("res_BOS_MA1.shp",
"res_BOS_MA2.shp",
"res_CHA_NC1.shp",
"res_CHA_NC2.shp",
"res_CIN_OH1.shp",
"res_CIN_OH2.shp",
"res_CIN_OH3.shp",
"res_KAN_MO1.shp",
"res_KAN_MO2.shp",
"res_LOU_KY1.shp",
"res_LOU_KY2.shp",
"res_MIN_MN1.shp",
"res_MIN_MN2.shp",
"res_NOR_VA1.shp",
"res_NOR_VA2.shp",
"res_POR_OR1.shp",
"res_POR_OR2.shp",
"res_STL_MO1.shp",
"res_STL_MO2.shp")
# Got some to remove: the ones with the numbers
MHMMM <- names(MSAshps) %in% c("res_BOS_MA1.shp",
"res_BOS_MA2.shp",
"res_CHA_NC1.shp",
"res_CHA_NC2.shp",
"res_CIN_OH1.shp",
"res_CIN_OH2.shp",
"res_CIN_OH3.shp",
"res_KAN_MO1.shp",
"res_KAN_MO2.shp",
"res_LOU_KY1.shp",
"res_LOU_KY2.shp",
"res_MIN_MN1.shp",
"res_MIN_MN2.shp",
"res_NOR_VA1.shp",
"res_NOR_VA2.shp",
"res_POR_OR1.shp",
"res_POR_OR2.shp",
"res_STL_MO1.shp",
"res_STL_MO2.shp")
rm(list=ls())
# The goal here:
# Merge transit shps with Census data.
# Obtain population density using the ALAND field.
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
MSAshps <- as.data.frame(list.files(pattern = "\\.shp$")) # list all shapefiles
colnames(MSAshps) <- "id"; MSAshps$id <- as.character(MSAshps$id)
MSAshps <- MSAshps[grepl("res", MSAshps$id),] # keep only the MSA ones
# Got some to remove: the ones with the numbers
drops <- c("res_BOS_MA1.shp",
"res_BOS_MA2.shp",
"res_CHA_NC1.shp",
"res_CHA_NC2.shp",
"res_CIN_OH1.shp",
"res_CIN_OH2.shp",
"res_CIN_OH3.shp",
"res_KAN_MO1.shp",
"res_KAN_MO2.shp",
"res_LOU_KY1.shp",
"res_LOU_KY2.shp",
"res_MIN_MN1.shp",
"res_MIN_MN2.shp",
"res_NOR_VA1.shp",
"res_NOR_VA2.shp",
"res_POR_OR1.shp",
"res_POR_OR2.shp",
"res_STL_MO1.shp",
"res_STL_MO2.shp")
MSAshps <- as.data.frame(MSAshps); colnames(MSAshps) <- "id"
MSAshps <- subset(MSAshps, !(id %in% drops))
rm(list=ls())
# The goal here:
# Merge transit shps with Census data.
# Obtain population density using the ALAND field.
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
MSAshps <- as.data.frame(list.files(pattern = "\\.shp$")) # list all shapefiles
colnames(MSAshps) <- "id"; MSAshps$id <- as.character(MSAshps$id)
MSAshps <- MSAshps[grepl("res", MSAshps$id),] # keep only the MSA ones
# Got some to remove. yes it's ugly
drops <- c("res_BOS_MA1.shp", "res_BOS_MA2.shp", "res_CHA_NC1.shp",
"res_CHA_NC2.shp", "res_CIN_OH1.shp", "res_CIN_OH2.shp",
"res_CIN_OH3.shp", "res_KAN_MO1.shp", "res_KAN_MO2.shp",
"res_LOU_KY1.shp", "res_LOU_KY2.shp", "res_MIN_MN1.shp",
"res_MIN_MN2.shp", "res_NOR_VA1.shp", "res_NOR_VA2.shp",
"res_POR_OR1.shp", "res_POR_OR2.shp", "res_STL_MO1.shp",
"res_STL_MO2.shp")
MSAshps <- as.data.frame(MSAshps); colnames(MSAshps) <- "id"
MSAshps <- subset(MSAshps, !(id %in% drops))
for (i in 1:length(MSAshps$id)) {
assign(MSAshps$id[i], readOGR(".", MSAshps$id[i]))
}
library(rgdal)
for (i in 1:length(MSAshps$id)) {
assign(MSAshps$id[i], readOGR(".", MSAshps$id[i]))
}
# Must remove .shp extension from end
MSAshps <- sub("\\.shp$", "", MSAshps$id)
for (i in 1:length(MSAshps)) {
assign(MSAshps[i], readOGR(".", MSAshps[i]))
}
rm(list=ls())
library(rgdal)
# The goal here:
# Merge transit shps with Census data.
# Obtain population density using the ALAND field.
# 1. Read in all the files you need
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
MSAshps <- as.data.frame(list.files(pattern = "\\.shp$")) # list all shapefiles
colnames(MSAshps) <- "id"; MSAshps$id <- as.character(MSAshps$id)
MSAshps <- MSAshps[grepl("res", MSAshps$id),] # keep only the MSA ones
# Got some to remove. yes it's ugly
drops <- c("res_BOS_MA1.shp", "res_BOS_MA2.shp", "res_CHA_NC1.shp",
"res_CHA_NC2.shp", "res_CIN_OH1.shp", "res_CIN_OH2.shp",
"res_CIN_OH3.shp", "res_KAN_MO1.shp", "res_KAN_MO2.shp",
"res_LOU_KY1.shp", "res_LOU_KY2.shp", "res_MIN_MN1.shp",
"res_MIN_MN2.shp", "res_NOR_VA1.shp", "res_NOR_VA2.shp",
"res_POR_OR1.shp", "res_POR_OR2.shp", "res_STL_MO1.shp",
"res_STL_MO2.shp")
MSAshps <- as.data.frame(MSAshps); colnames(MSAshps) <- "id"
MSAshps <- subset(MSAshps, !(id %in% drops))
# Must remove .shp extension from end
MSAshps <- sub("\\.shp$", "", MSAshps$id)
for (i in 1:length(MSAshps)) {
assign(MSAshps[i], readOGR(".", MSAshps[i]))
}
MSAshps
MSAshps
for (i in 4:length(MSAshps)) {
assign(MSAshps[i], readOGR(".", MSAshps[i]))
}
for (i in 4:length(MSAshps)) {
setwd("D:/AP LARSON/DallasCommutingV2/tractShps")
assign(MSAshps[i], readOGR(".", MSAshps[i]))
}
for (i in 1:length(MSAshps)) {
setwd("D:/AP LARSON/DallasCommutingV2/tractShps") # ? why not working ?
assign(MSAshps[i], readOGR(".", MSAshps[i]))
}
