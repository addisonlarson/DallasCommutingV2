if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
cats <- c("Socks","Coco")
rm(list=ls())
install.packages("gdata")
library(gdata)
hpi2016 <- read.csv("https://raw.githubusercontent.com/kho777/data-visualization/master/data/hpi2016dataonly.csv")
library(ggplot2)
theme_set(theme_minimal())
plot1 <- ggplot(hpi2016, aes(Region, Happy.Planet.Index))
plot1 + geom_boxplot(varwidth = TRUE, fill = "plum") +
labs(title = "BOXPLOT!",
subtitle = "Happy Planet Index by Region, 2016",
caption = "Source: HPI",
x = "HPI",
y = "Region")
plot1 + geom_boxplot(varwidth = TRUE, fill = "cornflowerblue") +
labs(title = "BOXPLOT!",
subtitle = "Happy Planet Index by Region, 2016",
caption = "Source: HPI",
x = "HPI",
y = "Region")
head(hpi2016)
hpi <- hpi2016$Happy.Planet.Index
pop <- hpi2016$Population
summary(hpi)
fivenum(hpi)
?gsub
install.packages("gapminder")
library(gapminder)
summary(gapminder)
str(gapminder)
gm=gapminder
head(gm)
summary(gm)
table(gm$country)
# Plot one variable
hist(gm$lifeExp)
# Plot two variables with logged version of x
plot(lifeExp ~ gdpPercap, gm, subset = year == 2007, log = "x", pch=16)
# Plot two variables with selected country
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "p")
# Try different plot types
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "l")
# Different symbols
plot(lifeExp ~ year, gm, subset = country == "Cambodia", type = "b", pch=18)
# More layered plots using ggplot2, with regression line
install.packages("ggplot2")
library(ggplot2)
p <- ggplot(data = gm)
p + geom_point(size=2)
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
# Alternative
# p <- ggplot(data=gm, aes(x=gdpPercap, y=lifeExp, color=continent))
p + geom_point()
# Add some color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp, color=continent))
p + geom_point()
# Add a regression line, dropped the color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="lm")
# Add a  line, dropped the color grouping, try other method
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="loess")
# Add a regression line with logged x, dropped the color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="lm") +
scale_x_log10()
# More layered plots with ggplot2, line with other methods (Generalized Additive Model)
if (require("ggplot2")) {
p <- ggplot(data = gm)
}
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(pch=16) + geom_smooth(method="gam") +
scale_x_log10()
# Why it is not purple?
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp,
color = "purple"))
p + geom_point() +
geom_smooth(method = "loess") +
scale_x_log10()
#  How about now?
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(color = "purple") +
geom_smooth(method = "loess") + scale_x_log10()
p <- ggplot(data = gm)
p + geom_point(size=2)
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point()
# Add some color grouping
p <- ggplot(data = gm,
mapping = aes(x = gdpPercap,
y = lifeExp, color=continent))
p + geom_point()
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "lme4")
pack(packages)
filenames <- list.files(path="E:/2018Spring/DataRegression",
pattern=".*csv")
filelist <- lapply(filenames, read.csv)
# Names for data frames
names(filelist) <- c("All",
"Pittsburgh",
"Baltimore",
"San Antonio",
"Chicago",
"Dallas",
"Denver",
"District of Columbia",
"Atlanta",
"Houston",
"Minneapolis",
"Tampa",
"Seattle",
"Los Angeles",
"Phoenix",
"Charlotte",
"Miami",
"Portland",
"Orlando",
"Philadelphia",
"Sacramento",
"San Diego",
"San Francisco",
"St. Louis",
"Boston",
"Detroit")
# Invisible function keeps lapply from spitting out the data.frames to the console
invisible(lapply(names(filelist), function(x) assign(x,filelist[[x]],envir=.GlobalEnv)))
filenames <- list.files(path="E:/2018Spring/DataRegression",
pattern=".*csv")
filelist <- lapply(filenames, read.csv)
pack <- function(pkg){
newpkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(newpkg))
install.packages(newpkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("leaflet", "rgdal", "shiny", "Rcpp", "httpuv")
pack(packages)
runExample("01_hello")
runApp('E:/Project Ideas/dccommdist')
runApp('E:/Project Ideas/dccommdist')
setwd("D:/AP LARSON/DallasCommutingV2")
xwalk <- read.csv("cbsatocountycrosswalk.csv")
head(xwalk)
# field CBSA in xwalk matches first string of files in
# D:\AP LARSON\DallasCommutingV2\ALL_REGIONS_CSV_tr_2014_0700-0859
setwd("D:/AP LARSON/DallasCommutingV2/ALL_REGIONS_CSV_tr_2014_0700-0859")
commuteMSAs <- list.files(".")
commuteMSAs
strsplit(commuteMSAs, "_")[[1]]
strsplit(commuteMSAs, "_")
js <-strsplit(commuteMSAs, "_")
for (i in 1:length(js)){
print i
}
for (i in 1:length(js)){
print js[[i]]
}
for (i in 1:40){
print js[[i]]
}
for (i in 1:40){
print (js[[i]])
}
for (i in 1:length(js)){
print (js[[i]])
}
for (i in 1:length(js)){
print (js[[i,1]])
}
for (i in 1:length(js)){
print (js[[i]][1])
}
rm(list=ls())
# Because the Census API is so tricky,
# I want to make sure I grab what
# OVERLAPS between these transit accessibility files
# (see https://conservancy.umn.edu/handle/11299/168064)
# and the HOLC shapefiles
# (see https://dsl.richmond.edu/panorama/redlining)
setwd("D:/AP LARSON/DallasCommutingV2")
xwalk <- read.csv("cbsatocountycrosswalk.csv")
# field CBSA in xwalk matches first string of files in
# D:\AP LARSON\DallasCommutingV2\ALL_REGIONS_CSV_tr_2014_0700-0859
setwd("D:/AP LARSON/DallasCommutingV2/ALL_REGIONS_CSV_tr_2014_0700-0859")
commuteMSAs <- list.files(".")
MSAid <- strsplit(commuteMSAs, "_")
for (i in 1:length(MSAid)){
(MSAid[[i]][1])
}
for (i in 1:length(MSAid)){
MSAsub[[i]] <- (MSAid[[i]][1])
}
rm(list=ls())
# Because the Census API is so tricky,
# I want to make sure I grab what
# OVERLAPS between these transit accessibility files
# (see https://conservancy.umn.edu/handle/11299/168064)
# and the HOLC shapefiles
# (see https://dsl.richmond.edu/panorama/redlining)
setwd("D:/AP LARSON/DallasCommutingV2")
xwalk <- read.csv("cbsatocountycrosswalk.csv")
# field CBSA in xwalk matches first string of files in
# D:\AP LARSON\DallasCommutingV2\ALL_REGIONS_CSV_tr_2014_0700-0859
setwd("D:/AP LARSON/DallasCommutingV2/ALL_REGIONS_CSV_tr_2014_0700-0859")
commuteMSAs <- list.files(".")
MSAid <- strsplit(commuteMSAs, "_")
MSAsub <- list()
for (i in 1:length(MSAid)){
MSAsub[[i]] <- (MSAid[[i]][1])
}
MSAsub <- do.call(rbind, MSAsub)
rm(list=ls())
# Because the Census API is so tricky,
# I want to make sure I grab what
# OVERLAPS between these transit accessibility files
# (see https://conservancy.umn.edu/handle/11299/168064)
# and the HOLC shapefiles
# (see https://dsl.richmond.edu/panorama/redlining)
setwd("D:/AP LARSON/DallasCommutingV2")
xwalk <- read.csv("cbsatocountycrosswalk.csv")
# field CBSA in xwalk matches first string of files in
# D:\AP LARSON\DallasCommutingV2\ALL_REGIONS_CSV_tr_2014_0700-0859
setwd("D:/AP LARSON/DallasCommutingV2/ALL_REGIONS_CSV_tr_2014_0700-0859")
commuteMSAs <- list.files(".")
MSAid <- strsplit(commuteMSAs, "_")
transitMSA <- list()
for (i in 1:length(MSAid)){
transitMSA[[i]] <- (MSAid[[i]][1])
}
transitMSA <- do.call(rbind, transitMSA)
# transitMSA is all MSAs present in transit accessibility files.
rm(list=ls())
# Because the Census API is so tricky,
# I want to make sure I grab what
# OVERLAPS between these transit accessibility files
# (see https://conservancy.umn.edu/handle/11299/168064)
# and the HOLC shapefiles
# (see https://dsl.richmond.edu/panorama/redlining)
setwd("D:/AP LARSON/DallasCommutingV2")
xwalk <- read.csv("cbsatocountycrosswalk.csv")
HOLC <- read.csv("HOLC List of Cities.csv")
# field CBSA in xwalk matches first string of files in
# D:\AP LARSON\DallasCommutingV2\ALL_REGIONS_CSV_tr_2014_0700-0859
setwd("D:/AP LARSON/DallasCommutingV2/ALL_REGIONS_CSV_tr_2014_0700-0859")
commuteMSAs <- list.files(".")
MSAid <- strsplit(commuteMSAs, "_")
transitMSA <- list()
for (i in 1:length(MSAid)){
transitMSA[[i]] <- (MSAid[[i]][1])
}
transitMSA <- do.call(rbind, transitMSA)
# transitMSA is all MSAs present in transit accessibility files.
# Cool. Now, let's find some matches for the HOLC shapefiles.
head(xwalk)
# Cool. Now, let's find some matches for the HOLC shapefiles.
xwalk$cbsaname
xwalk$state
HOLC[[1]]
HOLC[,1]
HOLC[1,]
# HOLC[,1] gives first row
testCase <- HOLC[,1]
grep(testCase$Keyword, xwalk$cbsaname)
# HOLC[,1] gives first row
testCase <- as.data.frame(HOLC[,1])
testCase
# HOLC[,1] gives first row
testCase <- as.data.frame(HOLC[1])
testCase <- as.data.frame(HOLC[1,])
grep(testCase$Keyword, xwalk$cbsaname)
grep(testCase$Keyword, xwalk$cbsaname)
grep("Dallas", xwalk$cbsaname)
View(HOLC)
View(MSAid)
View(xwalk)
grep(testCase$Keyword, xwalk$msaname)
matches <- grep(testCase$Keyword, xwalk$msaname)
matches
matchesDf <- as.data.frame(xwalk[matches,])
matchesDf <- xwalk[matches,]
matchesDf
matches <- grep(HOLC$Keyword, xwalk$msaname)
if (testCase$State == matchesDf$state)
if (testCase$State == matchesDf$state){
matchesDf
}
else {
matchesDf <- NULL
}
matchesDf$stateMatch <- 0
rm(list=ls())
# Because the Census API is so tricky,
# I want to make sure I grab what
# OVERLAPS between these transit accessibility files
# (see https://conservancy.umn.edu/handle/11299/168064)
# and the HOLC shapefiles
# (see https://dsl.richmond.edu/panorama/redlining)
setwd("D:/AP LARSON/DallasCommutingV2")
xwalk <- read.csv("cbsatocountycrosswalk.csv")
HOLC <- read.csv("HOLC List of Cities.csv")
# field CBSA in xwalk matches first string of files in
# D:\AP LARSON\DallasCommutingV2\ALL_REGIONS_CSV_tr_2014_0700-0859
setwd("D:/AP LARSON/DallasCommutingV2/ALL_REGIONS_CSV_tr_2014_0700-0859")
commuteMSAs <- list.files(".")
MSAid <- strsplit(commuteMSAs, "_")
transitMSA <- list()
for (i in 1:length(MSAid)){
transitMSA[[i]] <- (MSAid[[i]][1])
}
transitMSA <- do.call(rbind, transitMSA)
# transitMSA is all MSAs present in transit accessibility files.
# Cool. Now, let's find some matches for the HOLC shapefiles.
xwalk$msaname
xwalk$state
testCase <- as.data.frame(HOLC[1,])
matches <- grep(testCase$Keyword, xwalk$msaname)
matchesDf <- xwalk[matches,]
matchesdf
matchesDf
matchesDf$stateMatch <- ifelse(matchesDf$state == testCase$State, 1, matchesDf$stateMatch)
matchesDf$stateMatch <- 0
matchesDf$stateMatch <- ifelse(matchesDf$state == testCase$State, 1, matchesDf$stateMatch)
